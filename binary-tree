

// binary tree class

template <typename type>
class Binary_tree
{

private:
    // tree node class
    template <typename type2>
    class Tree_node
    {
    public:
        type2 data;
        Tree_node *left;
        Tree_node *right;

        Tree_node(type2 _data)
        {

            this->data = _data;
            this->left = nullptr;
            this->right = nullptr;
        }
    };
    // root
    Tree_node<type> *root;

public:
    // cons
    Binary_tree()
    {

        this->root = nullptr;
    }

    // create node "insert data"
    void insert(type _data)
    {

        Tree_node<type> *new_node = new Tree_node<type>(_data);

        if (root == nullptr)
        {

            root = new_node;
            return;
        }

        queue<Tree_node<type> *> queue;
        queue.push(root);

        while (!queue.empty())
        {
            Tree_node<type> *current_node = queue.front();
            queue.pop();
            if (current_node->left == nullptr)
            {

                current_node->left = new_node;
                break;
            }
            else
            {

                queue.push(current_node->left);
            }

            if (current_node->right == nullptr)
            {

                current_node->right = new_node;
                break;
            }
            else
            {

                queue.push(current_node->right);
            }
        }
    }

    // print tree
    void print()
    {

        if (root == nullptr)
        {

            cout << "tree is empty" << endl;
            return;
        }

        queue<Tree_node<type> *> queue;
        queue.push(root);

        while (!queue.empty())
        {

            Tree_node<type> *current_node = queue.front();
            queue.pop();

            cout << current_node->data << endl;

            if (current_node->left)
            {
                queue.push(current_node->left);
            }
            if (current_node->right)
            {
                queue.push(current_node->right);
            }
        }
    }

    // delete from tree

    // find_parent of key node using pre-order traversal
    Tree_node<type> *find_parent(Tree_node<type> *node, type _data)
    {

        // check if node is null
        if (node == nullptr)
        {

            return nullptr;
        }

        // check if the data = root data, root deletion will handled in the deletion method
        if (node->data == _data)
        {
            return nullptr;
        }

        // check if the left child's data matches the target data
        if (node->left != nullptr && node->left->data == _data)
        {
            return node;
        }

        // check if the right child's data matches the target data
        if (node->right != nullptr && node->right->data == _data)
        {
            return node;
        }

        Tree_node<type> *left_result = find_parent(node->left, _data);
        if (left_result != nullptr)
        {

            return left_result;
        }

        Tree_node<type> *right_result = find_parent(node->right, _data);

        return right_result;
    }

    // find_parent of mostright node

    Tree_node<type> *find_parent_of_mostright_node(Tree_node<type> *node)
    {

        Tree_node<type> *result;

        if (root == nullptr)
        {

            cout << "tree is empty" << endl;
            return nullptr;
        }

        queue<Tree_node<type> *> queue;
        queue.push(root);

        while (!queue.empty())
        {

            Tree_node<type> *current_node = queue.front();
            queue.pop();

            if (current_node->left)
            {
                queue.push(current_node->left);
            }
            if (current_node->right)
            {
                queue.push(current_node->right);
                if ((current_node->right) && (current_node->right->left == nullptr) && (current_node->right->right == nullptr))
                {

                    result = current_node;
                }
            }
        }

        return result;
    }


   

    // deletion method
    void delete_from_tree(type _data)
    {

       // root cases

       if(root == nullptr){return;}    
        if(root->data == _data){

            if(root->left == nullptr && root->right == nullptr){

                delete root;
                root = nullptr;
                return;

            } 
            if(root->left && root->right){

                Tree_node<type>* parent = find_parent_of_mostright_node(root);
                Tree_node<type>* mostright_node = parent->right;
                parent->right = nullptr;
                mostright_node->left = root->left;
                mostright_node->right = root->right;
                Tree_node<type>* delete_temp_node = root;
                root = mostright_node;
                delete delete_temp_node;
                return;

            }
            if(root->left != nullptr && root->right == nullptr){

                Tree_node<type>* left_node = root->left;
                root->left = nullptr;
                delete root;
                root = left_node;
                return;

            }
            if(root->right != nullptr && root->left == nullptr){

                Tree_node<type>* right_node = root->right;
                root->right = nullptr;
                delete root;
                root = right_node;
                return;

            }
 

        }




        //nood deletion

        //find parent of key_node
        Tree_node<type>* parent_of_key_node = find_parent(root , _data);
        //find the key_node
        Tree_node<type>* key_node;
        if(parent_of_key_node->left != nullptr && parent_of_key_node->left->data == _data){

            key_node = parent_of_key_node->left;

        }

        if(parent_of_key_node->right != nullptr && parent_of_key_node->right->data == _data){

            key_node = parent_of_key_node->right;

        }

        if(parent_of_key_node == nullptr){

            cout<<"make sure the data is currect"<<endl;
            return;

        }


        //find parent of mostright_node
        Tree_node<type>* parent_of_mostright_node = find_parent_of_mostright_node(root);
        //find the mostright_node
        Tree_node<type>* mostright_node;
        if(parent_of_mostright_node->right){

            mostright_node = parent_of_mostright_node->right;
            
        }

        // make the mostright_node point to key_node childs 
        mostright_node->left = key_node->left;
        mostright_node->right = key_node->right;

        //make prent of key_node point to mostright_node
        if(parent_of_key_node->left != nullptr && parent_of_key_node->left->data == _data){

            parent_of_key_node->left = mostright_node;

        }

        if(parent_of_key_node->right != nullptr && parent_of_key_node->right->data == _data){

            parent_of_key_node->right = mostright_node;;

        }

        //make parent_of_mostright_node right point to nullptr

        parent_of_mostright_node->right = nullptr;
        
        delete key_node;
       

        

    }

    // height of tree
    int internal_height(Tree_node<type> *node)
    {

        if (node == nullptr)
        {

            return 0;
        }

        return 1 + max(internal_height(node->left), internal_height(node->right));
    }

    int height()
    {

        return internal_height(this->root);
    }
     
    


};

/*
int main()
{

    Binary_tree<string> tree;
    cout << "===================" << endl;
    cout << "tree print: " << endl;
    tree.insert("a");
    tree.insert("b");
    tree.insert("c");
    tree.insert("d");
    tree.insert("e");
    tree.insert("f");
    tree.insert("g");
    tree.insert("h");
    tree.insert("i");
    tree.insert("j");
    tree.insert("k");
    tree.insert("l");
    

    tree.print();
    cout << "===================" << endl;
    cout << "height: " << tree.height() << endl;
    cout << "===================" << endl;
    cout << "after delete" << endl;
    tree.delete_from_tree("c");
    tree.print();
    cout << "===================" << endl;

    return 0;
}
*/